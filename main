#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char *COMMA = ",";  
/* 
 * Retrieves from the first line of the input file,
 * the size of the board (number of rows and columns).
 * 
 * fp: file pointer for input file
 * size: pointer to size
 */
void get_dimensions(FILE *fp, int *size) 
{      
    char *line = NULL;
    size_t len = 0;
    if (getline(&line, &len, fp) == -1) 
        {
        printf("Error in reading the file.\n");
        exit(1);
        }
    char *token = NULL;
    token = strtok(line, COMMA);
    *size = atoi(token);
}       
/* 
 * Returns 1 if and only if the board is in a valid state.
 * Otherwise returns 0.
 * 
 * board: heap allocated 2D board
 * size: number of rows and columns
 */
int n_in_a_row(int **board, int size) 
{
    // r_count_sum ,c_count_sum tells how many parallel rows and colums are matched.
    int r_count_sum=0;
    int c_count_sum=0;
    //oned1,twod1,oned2,twod2 for diagonal count.
    int oned1=0,twod1=0,oned2=0,twod2=0;
    //counts 1's and 2's in the entire games and in the end checks if the 1's are equal or greater than 2's
    int count1=0,count2=0;
    // found is like a boolean instead of returning directly
    //    after row or column is match , the result is stores in found
    int found=0;
    for(int i =0;i<size;i++)
        {
        //onea oneb twoa twob for rows and columns count 
        int onea=0,twoa=0,oneb=0,twob=0;
        //using the variables to find the positions of right to left diagonal
        int r=0,c=size-1;
        for(int j =0;j<size;j++)
            {
            //board[i][j]
            int val1=*(*(board+i)+j);
            //counting the number of 1's and 2's to check if 2's is not greater than 1's
            if(val1==1)count1++;
            else if(val1==2)count2++;
            //            board[j][i]
            int val2=*(*(board+j)+i);           
            
            // checking diagonals
            // checking left to right diagonal
            // board[x][x]
            if(i==j)
                {
                if(val1==1)oned1++;
                else if(val1==2)twod1++;
                }
            //checking right to left diagonal;
            if(c>=0)
                {
                int rc=*(*(board+r)+c);
                if(rc==1)oned2++;
                else if(rc==2)twod2++;
                r++;c--;
                }
            // chekcing rows and colums
            if(val1==1)onea++;
            else if(val1==2)twoa++;
            if(val2==1)oneb++;
            else if(val2==2)twob++;
            }
        
        
        //counting the parallel rows and columns
        
        if(onea==size||twoa==size)
            {
            r_count_sum++;
            }
        if(oneb==size||twob==size)
            {
            c_count_sum++;
            }
        
        // if rows,columns or diagonals which won was found, then change found to 1
        if(oned1==size||twod1==size||oned2==size||twod2==size)found=1;
        if(onea==size||oneb==size||twoa==size||twob==size){
            found =1;
        }
        
        onea=0;oneb=0;twoa=0;twob=0;oned2=0;twod2=0;
        }
    //checking for the parallel rows or columns
    
    if(r_count_sum>1||c_count_sum>1)found=0;
    // no of 1's == no. of 2's (or) no. of 1's - 1 ==no. of 2's
    
    else if(count1!=count2){
        if(count1-1!=count2){
            found=0;
        }
    }
    
    return found;
    
}    



/* 
 * This program prints Valid if the input file con&tains
 * a game board with either 1 or no winners; and where
 * there is at most 1 more X than O.
 * 
 * argc: CLA count
 * argv: CLA value
 */
int main(int argc, char *argv[]) 
{              
   
    //                printf("argc %d\n ",argc);
    if(argc!=2)
        {
        printf("Error Message\n");
        exit(1);
        }
    
    //Open the file and check if it opened successfully.
    FILE *fp = fopen(*(argv + 1), "r");
    if (fp == NULL) 
        {
        printf("Can't open file for reading.\n");
        exit(1);
        }
    //Declare local variables.
    int size;
    int * ptr=&size;
   
    get_dimensions(fp,ptr);
    if(!(size&1))
        {printf("invalid\n");
            exit(0);
        }
  
    int **board=malloc(size*sizeof(int*));
    for(int i =0;i<size;i++)
        {
        *(board+i)=malloc(sizeof(int)*size);
        }
    //Read the file line by line.
    //Tokenize each line wrt comma to store the values in your 2D array.
    char *line = NULL;
    size_t len = 0;
    char *token = NULL;
    for (int i = 0; i < size; i++)
        {
        
        if (getline(&line, &len, fp) == -1) 
            {
            printf("Error while reading the file.\n");
            exit(1);
            }
        
        token = strtok(line, COMMA);
        for (int j = 0; j < size; j++) 
            {
            
            //to initialize your 2D array.
            /* ADD ARRAY ACCESS CODE HERE */ 
            *(*(board +i)+j)= atoi(token);
            token = strtok(NULL, COMMA);
            }
        }
    
    //output depending on the function's return value.
    if(n_in_a_row(board,size))printf("valid\n");
    else printf("invalid\n");
    for(int i =0;i<size;i++)
        {
        free(*(board+i));
        }
    free(board);
    board=NULL;
    //Close the file.
    if (fclose(fp) != 0) 
        {
        printf("Error while closing the file.\n");
        exit(1);
        } 
    return 0;       
}       
